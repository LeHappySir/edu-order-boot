server:
  port: 7060

spring:
  application:
    name: edu-order-boot
  cloud:
    config:
      discovery:
        enabled: true
        service-id: edu-config-boot
      profile: @profile@
      name: ${spring.application.name}
    loadbalancer:
      ribbon:
        enabled: false
    discovery:
      register: true
      prefer-ip-address: true
      health-check-path: /actuator/health
      service-name: ${spring.application.name}
      instance-id: ${spring.application.name}:${spring.cloud.client.ip-address}
      health-check-interval: 5s
    alibaba:
      seata:
        tx-service-group: my_tx_group
#  datasource:
#    driver-class-name: com.mysql.jdbc.Driver
#    username: root
#    password: root
#    url: jdbc:mysql://localhost:3306/lagou_order?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=Asia/Shanghai
  klock:
    address: 127.0.0.1:6379
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: edu
    password: edu
    virtual-host: /edu
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    datasource:
      names: ds0
      ds0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        username: root
        password: root
        url: jdbc:mysql://127.0.0.1:3306/lagou_order?useUnicode=true&useSSL=false&characterEncoding=utf8&serverTimezone=Asia/Shanghai
        filters: stat,wall,log4j
        maxActive: 20
        initialSize: 1
        maxWait: 60000
        minIdle: 1
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        maxOpenPreparedStatements: 20
        connection-properties: druid.stat.merggSql=ture;druid.stat.slowSqlMillis=5000
    sharding:
      tables:
        user_course_order:
          actual-data-nodes: ds$->{0}.user_course_order_$->{0..9}
          table-strategy:
            inline:
              sharding-column: user_id
              algorithm-expression: user_course_order_$->{user_id % 10}
          key-generator:
            column: id
            type: SNOWFLAKE
            props:
              worker.id: 1
    props:
      sql:
        show: true
      check:
        table:
          metadata:
            # 是否在启动时检查分表元数据一致性
            enabled: false


#注册到Eureka服务中心
eureka:
  client:
    service-url:
      # 注册到集群，就把多个Eurekaserver地址使用逗号连接起来即可；注册到单实例（非集群模式），那就写一个就ok
      defaultZone: @eureka.host@
    #eureka client刷新本地缓存时间 默认30s
    registry-fetch-interval-seconds: 5
  instance:
    prefer-ip-address: true  #服务实例中显示ip，而不是显示主机名（兼容老的eureka版本）
    # 实例名称： 192.168.1.103:lagou-service-resume:8080，我们可以自定义它
    instance-id: ${spring.cloud.client.ip-address}:${spring.application.name}:${server.port}
    #服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除 默认90s
    lease-expiration-duration-in-seconds: 9
    #服务刷新时间配置，每隔这个时间会主动心跳一次 默认30s
    lease-renewal-interval-in-seconds: 3

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    #启用shutdown端点，以便支持优雅停机
    shutdown:
      enabled: true

#分布式链路追踪--调整SpringBoot日志输出级别
logging:
  config: classpath:logback.xml

seata:
  enabled: true
  application-id: edu_order_boot
  tx-service-group: my_tx_group # 事务群组（可以每个应用独立取名，也可以使用相同的名字）
  enable-auto-data-source-proxy: true
  use-jdk-proxy: true




mybatis-plus:
  #  datasource: dataSource
  mapper-locations: classpath:/mapper/**/*.xml
  #实体扫描，多个package用逗号或者分号分隔
  type-aliases-package:  com.lagou.edu.order.entity
  #typeEnumsPackage: com.baomidou.springboot.entity.enums
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID", 4:"该类型为未设置主键类型", 5:"字符串全局唯一ID";
    id-type: 2
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 1
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    capital-mode: true
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    # SQL 解析缓存，开启后多租户 @SqlParser 注解生效
    sql-parser-cache: true
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
  configuration-properties:
    dbType: mysql #设置全局属性用于控制数据库的类型

rocketmq:
  name-server: 127.0.0.1:9876
  producer:
    group: edu_group
  consumer:
    group: edu_group

feign:
  sentinel:
    enabled: true
  okhttp:
    enabled: true

jetcache:
  statIntervalMinutes: 15
  areaInCacheName: false
  hidePackages: com.lagou.edu
  local:
    # 短時本地緩存，主要用于要求时效较高的配置
    default:
      type: caffeine
      keyConvertor: fastjson
      expireAfterWriteInMillis: 60000
      expireAfterAccessInMillis: 40000